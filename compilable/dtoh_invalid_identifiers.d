/+
REQUIRED_ARGS: -HC -c -o- -wi
PERMUTE_ARGS:
TEST_OUTPUT:
---
compilable/dtoh_invalid_identifiers.d(102): Warning: variable `and` is a special operator in C++
compilable/dtoh_invalid_identifiers.d(102):        The generated C++ header will contain identifiers that are keywords in C++
compilable/dtoh_invalid_identifiers.d(103): Warning: function `register` is a keyword in C++
compilable/dtoh_invalid_identifiers.d(105): Warning: namespace `const_cast` is a keyword in C++
compilable/dtoh_invalid_identifiers.d(108): Warning: template parameter `register` is a keyword in C++
Warning: parameter `alignas` is a keyword in C++11
compilable/dtoh_invalid_identifiers.d(112): Warning: enum `mutable` is a keyword in C++
// Automatically generated by Digital Mars D Compiler

#pragma once

#include <assert.h>
#include <stddef.h>
#include <stdint.h>
#include <math.h>

#ifdef CUSTOM_D_ARRAY_TYPE
#define _d_dynamicArray CUSTOM_D_ARRAY_TYPE
#else
/// Represents a D [] array
template<typename T>
struct _d_dynamicArray
{
    size_t length;
    T *ptr;

    _d_dynamicArray() : length(0), ptr(NULL) { }

    _d_dynamicArray(size_t length_in, T *ptr_in)
        : length(length_in), ptr(ptr_in) { }

    T& operator[](const size_t idx) {
        assert(idx < length);
        return ptr[idx];
    }

    const T& operator[](const size_t idx) const {
        assert(idx < length);
        return ptr[idx];
    }
};
#endif

extern bool and;

extern void register(int32_t* ptr);

namespace const_cast
{
    extern void bar();

}
template <typename register>
struct S
{
    S()
    {
    }
};

extern void f(int32_t alignas);

enum class mutable
{
    yes = 0,
    no = 1,
};

typedef S<char > char8_t;
---
+/
#line 100
extern(C++):

__gshared bool and;
void register(int* ptr) {}

extern(C++, const_cast)
void bar() {}

struct S(register) {}

void f(int alignas) {}

enum mutable { yes, no }

alias char8_t = S!char;
