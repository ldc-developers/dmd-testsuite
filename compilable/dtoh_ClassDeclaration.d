/*
REQUIRED_ARGS: -HC -c -o-
PERMUTE_ARGS:
TEST_OUTPUT:
---
#pragma once

// Automatically generated by dmd -HC

#include <assert.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>

#define _d_void void
#define _d_bool bool
#define _d_byte signed char
#define _d_ubyte unsigned char
#define _d_short short
#define _d_ushort unsigned short
#define _d_int int
#define _d_uint unsigned
#define _d_long $?:32=long long|64=long$
#define _d_ulong unsigned $?:32=long long|64=long$
#define _d_float float
#define _d_double double
#define _d_real long double
#define _d_char char
#define _d_wchar wchar_t
#define _d_dchar unsigned
typedef _d_long d_int64;

#define _d_null NULL


// Parsing module dtoh_ClassDeclaration
class C;
class A;
struct Inner;
class C
{
public:
    _d_byte a;
    _d_int b;
    _d_long c;
};

class C2
{
public:
    _d_int a;
    _d_int b;
    _d_long c;
    C2(_d_int a);
};

// ignoring non-cpp class C3
class Aligned
{
public:
    _d_byte a;
    _d_int b;
    _d_long c;
    Aligned(_d_int a);
};

class A
{
public:
    _d_int a;
    C* c;
    virtual _d_void foo();
    extern "C" virtual _d_void bar();
    virtual _d_void baz(_d_int x = 42);
    struct
    {
        _d_int x;
        _d_int y;
    };
    union
    {
        _d_int u1;
        _d_char u2[4$?:32=u|64=LLU$];
    };
struct Inner
{
    _d_int x;
    Inner() : x() {}
};

class InnerC
{
public:
    _d_int x;
};

class NonStaticInnerC
{
public:
    _d_int x;
    A* this;
};

typedef Inner I;
class CC;

};
---
*/

/*
ClassDeclaration has the following issues:
  * align(n) does nothing. You can use align on classes in C++, though It is generally regarded as bad practice and should be avoided
*/

extern (C++) class C
{
    byte a;
    int b;
    long c;
}

extern (C++) class C2
{
    int a = 42;
    int b;
    long c;

    this(int a) {}
}

extern (C) class C3
{
    int a = 42;
    int b;
    long c;

    this(int a) {}
}

extern (C++) align(1) class Aligned
{
    byte a;
    int b;
    long c;

    this(int a) {}
}

extern (C++) class A
{
    int a;
    C c;

    void foo();
    extern (C) void bar() {}
    extern (C++) void baz(int x = 42) {}

    struct
    {
        int x;
        int y;
    }

    union
    {
        int u1;
        char[4] u2;
    }

    struct Inner
    {
        int x;
    }

    static extern(C++) class InnerC
    {
        int x;
    }

    class NonStaticInnerC
    {
        int x;
    }

    alias I = Inner;

    extern(C++) class CC;

}
