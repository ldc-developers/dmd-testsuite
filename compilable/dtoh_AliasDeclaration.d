/*
REQUIRED_ARGS: -HC -c -o-
PERMUTE_ARGS:
TEST_OUTPUT:
---
// Automatically generated by Digital Mars D Compiler v$n$

#pragma once

#include <assert.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>

#define _d_void void
#define _d_bool bool
#define _d_byte signed char
#define _d_ubyte unsigned char
#define _d_short short
#define _d_ushort unsigned short
#define _d_int int
#define _d_uint unsigned
#define _d_long $?:32=long long|64=long$
#define _d_ulong unsigned $?:32=long long|64=long$
#define _d_float float
#define _d_double double
#define _d_real long double
#define _d_char char
#define _d_wchar wchar_t
#define _d_dchar unsigned
typedef _d_long d_int64;

#define _d_null NULL


// Parsing module dtoh_AliasDeclaration
struct S;
struct S2;
class C;
class C2;
typedef _d_int T;

extern "C" _d_int x;

// ignored variable dtoh_AliasDeclaration.x
extern "C" _d_int foo(_d_int x);

// ignored function dtoh_AliasDeclaration.foo
extern _d_int foo2(_d_int x);

// ignored function dtoh_AliasDeclaration.foo2
struct S;

typedef S aliasS;

struct S2;

typedef S2 aliasS2;

// ignoring non-cpp class C
typedef C* aliasC;

class C2;

typedef C2* aliasC2;

---
*/

alias T = int;

extern (C) int x;

alias u = x;

extern (C) int foo(int x)
{
    return x * 42;
}

alias fun = foo;

extern (C++) int foo2(int x)
{
    return x * 42;
}

alias fun2 = foo2;

extern (C) struct S;

alias aliasS = S;

extern (C++) struct S2;

alias aliasS2 = S2;

extern (C) class C;

alias aliasC = C;

extern (C++) class C2;

alias aliasC2 = C2;
